{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/registration/registration.component.html","webpack:///src/app/registration/registration.component.ts","webpack:///src/app/services/app-config.service.ts","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/info-message.service.ts","webpack:///src/app/services/proxy.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","appConfigService","getAppConfig","appConfig","alert","console","log","selector","template","AppModule","declarations","providers","bootstrap","HeaderComponent","templateUrl","styleUrls","LoginComponent","fb","proxyService","infoMessageService","studentIdFormControl","required","pattern","studentPswFormControl","loginForm","group","studentId","config","studentInfo","getStudentInfo","invalid","snackMessage","email","psw","name","mailContent","email_to","subject","html_content","sendToPoxy","studentLogin","checkPassword","retCode","data","length","studentPsw","lostPassword","clickNext","RegistrationComponent","loading","studentData","studentNameFormControl","minLength","studentEmailFormControl","studentPhoneFormControl","registerForm","faculties","courses","groups","active","login","undefined","APP_CONFIG_URL","AppConfigService","dataService","getData","err","providedIn","NAME_UKR_PATTERN","EMAIL_PATTERN","ID_PATTERN","PHONE_PATTERN","DataService","httpClient","url","get","toPromise","options","headers","post","resp","InfoMessageService","snackBar","message","msgType","open","panelClass","PROXY_URL","ProxyService","proxyConfig","database","proxyEntryPoint","endPointName","endPointUrl","proxyUrl","end_point","putData","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'registration', component: RegistrationComponent },\n  { path: '**', component: LoginComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AppConfigService, AppConfig } from './services/app-config.service';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <app-header></app-header>\n    <router-outlet></router-outlet>\n  `\n})\nexport class AppComponent implements OnInit {\n  appConfig: AppConfig | void;\n  \n  constructor(private appConfigService: AppConfigService,) { }\n\n  async ngOnInit() {\n    // читать конфиг\n    this.appConfig = await this.appConfigService.getAppConfig()\n    if (!this.appConfig) {\n      alert('Помилка в конфігураційному файлі')\n    }\n    console.log(\"APP\", this.appConfig);\n\n    // TODO: инициализировать БД\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n// app components\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\n\n// material components\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    LoginComponent,\n    RegistrationComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSelectModule,\n    MatInputModule,\n    MatGridListModule,\n    MatSnackBarModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"tl-toolbar\">\n    <button mat-icon-button>\n        <mat-icon class=\"header-menu-button\">menu</mat-icon>\n    </button>\n    <span class=\"tl-title\">Завантаження студентських робіт</span>\n    <!-- для добавления инфы справа -->\n    <ng-content></ng-content>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\n// import { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { AppConfigService, AppConfig, ID_PATTERN } from '../services/app-config.service';\nimport { ProxyService, ProxyRetCode, PROXY_URL } from '../services/proxy.service';\nimport { InfoMessageService } from '../services/info-message.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: 'login.component.html',\n  styleUrls: ['login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  config: AppConfig;\n  studentId: string;\n  studentPsw: string;\n\n  studentIdFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(ID_PATTERN)\n  ])\n\n  studentPswFormControl = new FormControl('', [\n    Validators.required\n  ])\n\n\n  constructor(fb: FormBuilder, private appConfigService: AppConfigService,\n    private proxyService: ProxyService, private infoMessageService: InfoMessageService) {\n\n    this.loginForm = fb.group({\n      \"studentId\": this.studentIdFormControl,\n      \"studentPsw\": this.studentPswFormControl,\n    })\n\n    this.studentId = '';\n  }\n\n  async ngOnInit() {\n    this.config = await this.appConfigService.getAppConfig() as AppConfig;\n  }\n\n  /**\n   * открывает главный экран с работами студента\n   */\n  clickNext() {\n\n    const studentInfo = this.getStudentInfo(this.studentId);\n    if (!studentInfo) return;\n\n    //todo открить єкран студента и передать ему данные студента\n  }\n\n  /**\n   * отсылает студенту пароль на его адрес, который берет из БД по логину\n   */\n  async lostPassword(): Promise<void> {\n\n    // попросіть заполніть поле login, еслі пустое\n    if (this.studentIdFormControl.invalid) {\n      this.infoMessageService.snackMessage('Заповніть будь-ласка поле \"Номер перепустки\" а потім тисніть сюди', 'alert')\n      return;\n    }\n\n    // прочітать studentInfo\n    const studentInfo = await this.getStudentInfo(this.studentId, false);\n    if (!studentInfo) return;\n\n    // вибрать email і пароль\n    const email = studentInfo['email'];\n    const psw = studentInfo['psw'];\n    const name = studentInfo['name'];\n\n    // отослать пароль на email\n    const mailContent = {\n      name: name,\n      email_to: email,\n      subject: 'СИСТЕМА ЗАВАНТАЖЕННЯ - запрос на пароль',\n      html_content: `Ваш пароль для входу - <strong>${psw}</strong>`\n    }\n    this.proxyService.sendToPoxy('mailSender', 'email', { \"data\": mailContent })\n\n    // вывести сообщеніе\n    this.infoMessageService.snackMessage(`На вашу електронну адресу надіслано ваш пароль`, 'oK');\n\n  }\n\n  /**\n   * считывает из БД данные студента\n   * @param studentLogin - логин студента\n   * @return - объект из БД с данными студента | {}\n   */\n  async getStudentInfo(studentLogin: string, checkPassword = true): Promise<object | boolean> {\n\n    const retCode = await this.proxyService.sendToPoxy('get_student_info', 'database',\n      { \"login\": studentLogin }) as ProxyRetCode;\n\n    if (retCode.data.length === 0) {\n      this.infoMessageService.snackMessage(`Студент з логіном ${studentLogin} не зареєстрований. Перевірте номер Вашої перепустки`, \"alert\");\n      return false;\n    }\n\n    if (checkPassword) {\n      if (retCode.data[0].psw !== this.studentPsw) {\n        this.infoMessageService.snackMessage('Ви ввели невірний пароль', \"alert\");\n        return false;\n      }\n    }\n    // вернуть данные если все успешо\n    return retCode.data[0];\n  }\n}\n","<div class=\"content\">\n    <mat-card class=\"login-window forms-layout\">\n        <mat-card-header class=\"forms-header\">\n            <mat-card-title>\n                <img src=\"../../assets/img/logo.png\" class=\"logo-img\">\n            </mat-card-title>\n            <mat-card-subtitle>Вхід</mat-card-subtitle>\n        </mat-card-header>\n\n        <mat-card-content>\n            <form [formGroup]=\"loginForm\">\n                <mat-grid-list cols=\"2\" rowHeight=\"80px\" gutterSize=\"30px\">\n                    <mat-grid-tile>\n                        <mat-form-field appearance = \"outline\">\n                            <mat-label>Номер перепустки</mat-label>\n                            <input matInput [(ngModel)]=\"studentId\" formControlName=\"studentId\"\n                                placeholder=\"тількі цифри\">\n                            <mat-error *ngIf=\"studentIdFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentIdFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance = \"outline\">\n                            <mat-label>Пароль</mat-label>\n                            <input matInput type=\"password\" [(ngModel)]=\"studentPsw\" formControlName=\"studentPsw\">\n                            <mat-error *ngIf=\"studentPswFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n                </mat-grid-list>\n            </form>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <mat-grid-list cols=\"2\" rowHeight=\"10px\" gutterSize=\"30px\">\n                <mat-grid-tile></mat-grid-tile>\n                <mat-grid-tile>\n                    <!-- <div class=\"right-align-forced\"> -->\n                    <div style=\"font-size: x-small;\">\n                        <a href=\"#\" (click)=\"lostPassword()\">Забув пароль</a>\n                    </div>\n                </mat-grid-tile>\n            </mat-grid-list>\n        </mat-card-actions>\n\n        <mat-card-footer style=\"margin-top: 30px;\">\n            <mat-grid-list cols=\"2\" rowHeight=\"50px\" gutterSize=\"30px\">\n\n                <mat-grid-tile>\n                    <button mat-button [routerLink]=\"['/registration']\" routerLinkActive=\"router-link-active\">\n                        <div>Зареєструватись</div>\n                    </button>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <!-- <div class=\"right-align-forced\"> -->\n                    <button mat-flat-button color=\"primary\" [disabled]=\"loginForm.invalid\" (click)=\"clickNext()\">Далі\n                    </button>\n                    <!-- </div> -->\n                </mat-grid-tile>\n\n            </mat-grid-list>\n        </mat-card-footer>\n\n    </mat-card>\n</div>","<div class=\"content\">\n    <mat-card class=\"register-window forms-layout\">\n        <mat-card-header class=\"forms-header\">\n            <mat-card-title>\n                <img src=\"../../assets/img/logo.png\" class=\"logo-img\">\n            </mat-card-title>\n            <mat-card-subtitle>Реєстрація</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <mat-grid-list cols=\"3\" rowHeight=\"80px\" gutterSize=\"30px\">\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Факультет</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.faculty\">\n                            <mat-option *ngFor=\"let faculty of faculties\" [value]=\"faculty['short_name']\">\n                                {{faculty['short_name']}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Курс</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.course\">\n                            <mat-option *ngFor=\"let course of courses\" [value]=\"course\">\n                                {{course}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Група</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.group\">\n                            <mat-option *ngFor=\"let group of groups\" [value]=\"group\">\n                                {{group}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <form [formGroup]=\"registerForm\">\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                             <mat-label>Прізвище І.П.</mat-label>\n                            <input matInput type=\"text\" [(ngModel)]=\"studentData.name\"\n                                placeholder=\"Заповнюйте украЇнською\" formControlName=\"studentName\">\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.minlength\">\n                                Занадто коротке прізвище\n                            </mat-error>\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.pattern\">\n                                Пишіть <strong>Українською!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Електронна пошта</mat-label>\n                            <input matInput type=\"email\" [(ngModel)]=\"studentData.email\" formControlName=\"studentEmail\">\n                            <mat-error *ngIf=\"studentEmailFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentEmailFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Номер телефону</mat-label>\n                            <input matInput type=\"tel\" [(ngModel)]=\"studentData.phone\" formControlName=\"studentPhone\"\n                                placeholder=\"Це поле необов'язкове\">\n                            <mat-error *ngIf=\"studentPhoneFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile [colspan]=\"2\">\n                        <div class=\"right-align-forced\">\n                            <mat-form-field appearance=\"outline\">\n                                <mat-label>Номер перепустки</mat-label>\n                                <input matInput [(ngModel)]=\"studentData.login\" formControlName=\"studentId\"\n                                    placeholder=\"тількі цифри\">\n                                <mat-error *ngIf=\"studentIdFormControl.errors?.required\">\n                                    Це поле<strong> обов'зкове!</strong>\n                                </mat-error>\n                                <mat-error *ngIf=\"studentIdFormControl.errors?.pattern\">\n                                    Помилка в форматі!\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Пароль</mat-label>\n                            <input matInput type=\"password\" [(ngModel)]=\"studentData.psw\" formControlName=\"studentPsw\">\n                            <mat-error *ngIf=\"studentPswFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile [colspan]=\"3\">\n                        <div class=\"right-align-forced\">\n                            <button mat-flat-button color=\"primary\" [class.spinner]=\"loading\"\n                                [disabled]=\"registerForm.invalid || loading\" (click)=\"clickNext()\">Далі\n                            </button>\n                        </div>\n                    </mat-grid-tile>\n                </form>\n\n            </mat-grid-list>\n        </mat-card-content>\n\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  AppConfigService, AppConfig, Faculty,\n  NAME_UKR_PATTERN, EMAIL_PATTERN, ID_PATTERN, PHONE_PATTERN\n} from '../services/app-config.service';\nimport { ProxyService, ProxyRetCode, PROXY_URL } from '../services/proxy.service';\nimport {InfoMessageService}from '../services/info-message.service';\n\ninterface StudentData {\n  faculty: string,\n  course: number,\n  group: string,\n  email: string,\n  phone?: string,\n  login: number,\n  name: string,\n  psw: string,\n  active: boolean\n}\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: 'registration.component.html',\n  styleUrls: ['registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  config: AppConfig;\n  faculties: Faculty[];\n  courses: number[];\n  groups: string[];\n\n  proxyConfig: object;\n\n  loading = false;\n\n  studentData = {} as StudentData;\n\n  studentNameFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.pattern(NAME_UKR_PATTERN)\n  ]);\n\n  studentEmailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(EMAIL_PATTERN)\n  ])\n\n  studentPhoneFormControl = new FormControl('', [\n    Validators.pattern(PHONE_PATTERN)\n  ])\n\n  studentIdFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(ID_PATTERN)\n  ])\n\n  studentPswFormControl = new FormControl('', [\n    Validators.required\n  ])\n\n\n  constructor(private appConfigService: AppConfigService,\n    // fb: FormBuilder, private snackBar: MatSnackBar,\n    fb: FormBuilder, private infoMessageService: InfoMessageService,\n    private proxyService: ProxyService) {\n\n    this.registerForm = fb.group({\n      \"studentName\": this.studentNameFormControl,\n      \"studentEmail\": this.studentEmailFormControl,\n      \"studentPhone\": this.studentPhoneFormControl,\n      \"studentId\": this.studentIdFormControl,\n      \"studentPsw\": this.studentPswFormControl,\n    })\n\n    // this.proxyConfig = proxyService.proxyConfig;\n  }\n\n  async ngOnInit() {\n    // получіть данние із app_config\n    this.config = await this.appConfigService.getAppConfig() as AppConfig;\n    this.faculties = this.config.data.faculties;\n    this.courses = this.config.data.courses;\n    this.groups = this.config.data.groups;\n  }\n\n  /**\n   * регистрирует студета путем передачи его данных через прокси-функцию на\n   * сервер БД\n  * Сначала проверяет, есть ли такой логин в БД - посылает запрос с логином,\n  * при отсутствии логина посылает 2-й запрос с рег. данными\n  * при успешной регистрации отправляет через прокси запрос к sendGrid для отсылки\n  * студенту письма для подтверждения\n   */\n  async clickNext(): Promise<any> {\n    let retCode: ProxyRetCode;\n\n    this.studentData.active = false;\n\n    // проверить зарегистрировался ли уже студетн ранее: делаем запрос к БД найти Id\n    // в retCode.data - результат проверки\n    this.loading = true;\n    retCode = await this.proxyService.sendToPoxy('get_student_info', 'database',\n      { \"login\": this.studentData.login });\n    // виходим, если студент уже регался\n    if (retCode.data.length > 0) {\n      this.infoMessageService.snackMessage(`Студент з номером перепустки ${this.studentData.login} вже зареєстрований.\\nПеревірте номер Вашої перепустки, або звернітся до викладача`, \"alert\");\n      this.loading = false;\n      return;\n    }\n    // выходим если ошибки\n    if (retCode.code === 0 || retCode.code == undefined) {\n      this.infoMessageService.snackMessage(`Щось пішло не так!`, 'alert');\n      this.loading = false;\n      return;\n    }\n\n    // регистрируем ...\n    retCode = await this.proxyService.sendToPoxy('add_new_student', 'database',\n      { \"data\": this.studentData });\n    this.loading = false;\n\n    if (retCode.code === 1) {\n\n      this.infoMessageService.snackMessage(`Вас зареєстровано з логіном ${this.studentData.login}. На адресу ${this.studentData.email} надіслано запит на підтвердження.` +\n        `УВАГА: відсилка повідомлення може зайняти декілька хвилин, також воно може потрапити в спам`, 'oK');\n\n      // отправим мыло с запросом на подтверждение\n      const mailContent = {\n        name: this.studentData.name,\n        email_to: this.studentData.email,\n        subject: 'СИСТЕМА ЗАВАНТАЖЕННЯ - підтвердження реєстрації',\n        html_content: 'якщо ви щойно реєструвалися в системі завантаження то натисніть це посилання ' +\n          `для підтвердження <br><a href ='${PROXY_URL}/set_student_to_active?login=${this.studentData.login}'><strong>Підтвердити</strong></a>`\n      }\n      // регистрация прошла успешо: послать синхронно письмо для подтверждения на мыло\n      this.proxyService.sendToPoxy('mailSender', 'email', { \"data\": mailContent })\n\n      return\n    }\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataService } from './data.service';\n\nexport const APP_CONFIG_URL = \"http://localhost:4200/assets/app-config.json\";\n\n@Injectable({ providedIn: 'root' })\nexport class AppConfigService {\n\n  config: AppConfig;\n\n  constructor(private dataService: DataService) { }\n\n  async getAppConfig() {\n\n    return await this.dataService.getData(APP_CONFIG_URL)\n      .then(data => {\n        this.config = data as AppConfig;\n        // console.log(\"APPCONFIG\", this.config);\n        return this.config;\n      })\n      // TODO: сделать нормальную обработку ошибок (читать как)\n      .catch(err => console.log(err))\n  }\n}\n\n/**\n * TODO: комментировать!\n */\nexport interface AppConfig {\n  data: {\n    faculties: Faculty[],\n    courses: number[],\n    groups: string[],\n    disciplines: Discipline[],\n    tasks: Task[]\n  }\n}\n\nexport interface Faculty {\n  shortName: string,\n  longName: string\n}\nexport interface Discipline {\n  shortName: string,\n  longName: string\n}\nexport interface Task {\n  name: string,\n  description?: string\n}\n\nexport const NAME_UKR_PATTERN = \"^[А-ЕЖ-ЩЬ-ЯІЄа-еж-щь-яіїє. \\'\\\"]+$\";\nexport const EMAIL_PATTERN = \"^([a-z0-9_\\.-]+)@([a-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$\";\nexport const ID_PATTERN = \"^\\\\d{6}$\";\nexport const PHONE_PATTERN = \"^[0-9]{3}[- ][0-9]{3}[- ][0-9]{4}$\";\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * получает строку REST данных из заданного url \n   * @param url - откуда брать данные\n   */\n  async getData(url: string) {\n    return await this.httpClient.get(url).toPromise()\n      .catch(err => console.log(\"***\", err))\n  }\n\n  /**\n   * передает на `url` json-данные\n   * @param url  -  адрес\n   * @param data - данные\n   * @return - {data: <json | error>, code: <1-успех | 0-ошібка>}\n   */\n  async putData(url: string, data: object): Promise<object | void> {\n\n    const options = {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      }\n    };\n    console.log(\"DATASERVICE-URL\", url);\n\n    return await this.httpClient.post(url, data, options).toPromise()\n      .then(resp => {\n        console.log(\"DATASERVICE- RESP\");\n        console.log(resp);\n        return { data: resp, code: 0 }\n      })\n      .catch(err => { return { data: err, code: 1 } });\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoMessageService {\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  snackMessage(message: string, msgType: string) {\n    this.snackBar.open(message, '\\u00D7', { panelClass: [msgType] });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AppConfigService } from './app-config.service';\nimport { DataService } from './data.service';\n\nexport const PROXY_URL = 'https://us-central1-tl-2020.cloudfunctions.net';\n\nexport interface ProxyRetCode {\n  code: number,\n  message: string,\n  data?: any\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProxyService {\n  // TODO сделать через інтерфейс\n  proxyConfig: any;\n\n  constructor(private appConfigService: AppConfigService,\n    private dataService: DataService) {\n\n    // TODO взять из appConfig (потом) \n    this.proxyConfig =\n    {\n      database: 'https://webhooks.mongodb-realm.com/api/client/v2.0/app',\n      email: '',\n    }\n    // {\n    //   database: 'http://localhost:8080/',\n    //   email: 'http://sendgrid:5000/',\n    // }\n  }\n\n  /**\n   * отправляет запросы на прокси\n   * @param proxyEntryPoint - имя функции на прокси, которая перешлет\n   * данные на оконечный сервис\n   * @param endPointName - имя сервиса из `proxyConfig`, для которого прокси\n   * пересылает данные\n   * @param data - данные для обработки\n   * @return - ответ от прокси с обработаным запросом\n   *  {code: <1-успех | 0-ошибка>, message: <Ok | err.message> data: <json | {}>}\n   */\n  async sendToPoxy(proxyEntryPoint: string, endPointName: string, data: any): Promise<any> {\n\n    console.log(\" PROXY-ПАРАМЕТРЫ\",proxyEntryPoint,endPointName,data);\n    \n    let retCode: ProxyRetCode;\n    // взять url оконечного сервиса из `proxyConfig`\n    const endPointUrl = this.proxyConfig[endPointName];\n    \n    // формирование  адреса точки в прокси отвечающей за пересылку данных\n    const proxyUrl = `${PROXY_URL}/${proxyEntryPoint}`\n\n    // добавить к `data` точку назначение для обработки оконечным сервисом\n    data.end_point = endPointUrl;\n\n    // отправить PUT на прокси через `dataService`\n    return await this.dataService.putData(proxyUrl, data)\n      .then(data => {\n        // todo проверить возврат от dataService  data['code']\n        retCode = { code: 1, message: \"Ok\", data: data['data'] }\n        return retCode\n      })\n      .catch(err => {\n        // в `data` помещается код возврата из end-point сервиса\n        retCode = { code: 0, message: err.message, data: {} }\n        return retCode\n      })\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}