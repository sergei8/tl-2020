{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/registration/registration.component.ts","./src/app/registration/registration.component.html","./src/app/services/app-config.service.ts","./src/app/services/data.service.ts","./src/app/services/info-message.service.ts","./src/app/services/proxy.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAEE;AACqB;;;AAE9E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qEAAc,EAAE;IACvC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qEAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,0FAAqB,EAAE;IAC1D,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,qEAAc,EAAE;CAC1C,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;;;;;;;;;AChBiD;;;;;AAU3C,MAAM,YAAY;IAGvB,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAK,CAAC;IAEtD,QAAQ;;YACZ,gBAAgB;YAChB,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE;YAC3D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,KAAK,CAAC,kCAAkC,CAAC;aAC1C;YACD,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAEnC,4BAA4B;QAC9B,CAAC;KAAA;;wEAdU,YAAY;4FAAZ,YAAY;QAJrB,wEAAyB;QACzB,2EAA+B;;6FAGtB,YAAY;cAPxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE;;;GAGT;aACF;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACU;AACF;AAER;AACuB;AAE/E,iBAAiB;AAC8B;AACa;AACH;AACqB;AAE9E,sBAAsB;AACqC;AACJ;AACM;AACN;AACI;AACF;AACK;;AA4BvD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAhBJ;YACP,uEAAa;YACb,qEAAgB;YAChB,0DAAW;YACX,kEAAmB;YACnB,oEAAgB;YAChB,4FAAuB;YACvB,2EAAgB;YAChB,yEAAe;YACf,qEAAa;YACb,qEAAa;YACb,yEAAe;YACf,uEAAc;YACd,6EAAiB;YACjB,8EAAiB;SAClB;mIAIU,SAAS,mBAxBlB,2DAAY;QACZ,wEAAe;QACf,qEAAc;QACd,2FAAqB,aAGrB,uEAAa;QACb,qEAAgB;QAChB,0DAAW;QACX,kEAAmB;QACnB,oEAAgB;QAChB,4FAAuB;QACvB,2EAAgB;QAChB,yEAAe;QACf,qEAAa;QACb,qEAAa;QACb,yEAAe;QACf,uEAAc;QACd,6EAAiB;QACjB,8EAAiB;6FAKR,SAAS;cA1BrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,wEAAe;oBACf,qEAAc;oBACd,2FAAqB;iBACtB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,qEAAgB;oBAChB,0DAAW;oBACX,kEAAmB;oBACnB,oEAAgB;oBAChB,4FAAuB;oBACvB,2EAAgB;oBAChB,yEAAe;oBACf,qEAAa;oBACb,qEAAa;oBACb,yEAAe;oBACf,uEAAc;oBACd,6EAAiB;oBACjB,8EAAiB;iBAClB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACjDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;AAO3C,MAAM,eAAe;IAE1B,gBAAgB,CAAC;IACjB,QAAQ;IACR,CAAC;;8EAJU,eAAe;+FAAf,eAAe;;QCP5B,iFACI;QAAA,4EACI;QAAA,8EAAqC;QAAA,+DAAI;QAAA,4DAAW;QACxD,4DAAS;QACT,0EAAuB;QAAA,2OAA+B;QAAA,4DAAO;QAE7D,6DAAY;QAChB,4DAAc;;6FDAD,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AENiD;AAC+B;AACjF,6DAA6D;AAE4B;;;;;;;;;;;;;;ICa7D,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;;IACZ,4EACI;IAAA,0JACJ;IAAA,4DAAY;;;IAQZ,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;;ADnBjC,MAAM,cAAc;IAiBzB,YAAY,EAAe,EAAU,gBAAkC,EAC7D,YAA0B,EAAU,kBAAsC;QAD/C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAC7D,iBAAY,GAAZ,YAAY,CAAc;QAAU,uBAAkB,GAAlB,kBAAkB,CAAoB;QAXpF,yBAAoB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YACzC,yDAAU,CAAC,QAAQ;YACnB,yDAAU,CAAC,OAAO,CAAC,uEAAU,CAAC;SAC/B,CAAC;QAEF,0BAAqB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC1C,yDAAU,CAAC,QAAQ;SACpB,CAAC;QAMA,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,KAAK,CAAC;YACxB,WAAW,EAAE,IAAI,CAAC,oBAAoB;YACtC,YAAY,EAAE,IAAI,CAAC,qBAAqB;SACzC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAEK,QAAQ;;YACZ,IAAI,CAAC,MAAM,IAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAe,EAAC;QACxE,CAAC;KAAA;IAED;;OAEG;IACH,SAAS;QAEP,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW;YAAE,OAAO;QAEzB,4DAA4D;IAC9D,CAAC;IAED;;OAEG;IACG,YAAY;;YAEhB,8CAA8C;YAC9C,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE;gBACrC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,mEAAmE,EAAE,OAAO,CAAC;gBAClH,OAAO;aACR;YAED,wBAAwB;YACxB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACrE,IAAI,CAAC,WAAW;gBAAE,OAAO;YAEzB,yBAAyB;YACzB,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;YAC/B,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;YAEjC,2BAA2B;YAC3B,MAAM,WAAW,GAAG;gBAClB,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,yCAAyC;gBAClD,YAAY,EAAE,kCAAkC,GAAG,WAAW;aAC/D;YACD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;YAE5E,oBAAoB;YACpB,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,gDAAgD,EAAE,IAAI,CAAC,CAAC;QAE/F,CAAC;KAAA;IAED;;;;OAIG;IACG,cAAc,CAAC,YAAoB,EAAE,aAAa,GAAG,IAAI;;YAE7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,EAAE,UAAU,EAC/E,EAAE,OAAO,EAAE,YAAY,EAAE,CAAiB,CAAC;YAE7C,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,qBAAqB,YAAY,sDAAsD,EAAE,OAAO,CAAC,CAAC;gBACvI,OAAO,KAAK,CAAC;aACd;YAED,IAAI,aAAa,EAAE;gBACjB,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,UAAU,EAAE;oBAC3C,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;oBAC1E,OAAO,KAAK,CAAC;iBACd;aACF;YACD,iCAAiC;YACjC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;KAAA;;4EApGU,cAAc;8FAAd,cAAc;QCb3B,yEACI;QAAA,8EACI;QAAA,qFACI;QAAA,iFACI;QAAA,oEACJ;QAAA,4DAAiB;QACjB,oFAAmB;QAAA,mFAAI;QAAA,4DAAoB;QAC/C,4DAAkB;QAElB,mFACI;QAAA,0EACI;QAAA,mFACI;QAAA,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,uJAAgB;QAAA,4DAAY;QACvC,4EAEA;QAFgB,sLAAuB;QAAvC,4DAEA;QAAA,wHACI;QAEJ,wHACI;QAER,4DAAiB;QACrB,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,gGAAM;QAAA,4DAAY;QAC7B,4EACA;QADgC,uLAAwB;QAAxD,4DACA;QAAA,wHACI;QAER,4DAAiB;QACrB,4DAAgB;QACpB,4DAAgB;QACpB,4DAAO;QACX,4DAAmB;QAEnB,oFACI;QAAA,qFACI;QAAA,4EAA+B;QAC/B,iFACI;QACA,2EACI;QAAA,yEAAqC;QAAzB,kIAAS,kBAAc,IAAC;QAAC,+HAAY;QAAA,4DAAI;QACzD,4DAAM;QACV,4DAAgB;QACpB,4DAAgB;QACpB,4DAAmB;QAEnB,uFACI;QAAA,qFAEI;QAAA,iFACI;QAAA,8EACI;QAAA,uEAAK;QAAA,sJAAe;QAAA,4DAAM;QAC9B,4DAAS;QACb,4DAAgB;QAEhB,iFACI;QACA,8EAA6F;QAAtB,uIAAS,eAAW,IAAC;QAAC,qFAC7F;QAAA,4DAAS;QAEb,4DAAgB;QAEpB,4DAAgB;QACpB,4DAAkB;QAEtB,4DAAW;QACf,4DAAM;;QA7DY,0DAAuB;QAAvB,oFAAuB;QAKG,0DAAuB;QAAvB,kFAAuB;QAE5B,0DAA6C;QAA7C,2JAA6C;QAG7C,0DAA4C;QAA5C,0JAA4C;QASvB,0DAAwB;QAAxB,mFAAwB;QAC7C,0DAA8C;QAA9C,6JAA8C;QAyB9C,2DAAgC;QAAhC,6IAAgC;QAOX,0DAA8B;QAA9B,2FAA8B;;6FDjD7E,cAAc;cAL1B,uDAAS;eAAC;gBACT,QAAQ,EAAE,WAAW;gBACrB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEZiD;AAC+B;AAKzC;AAC0C;;;;;;;;;;;;;;;ICOtD,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAFiC,4FAA+B;IACzE,0DACJ;IADI,qGACJ;;;IASA,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAF8B,6EAAgB;IACvD,0DACJ;IADI,sFACJ;;;IASA,iFACI;IAAA,uDACJ;IAAA,4DAAa;;;IAF4B,4EAAe;IACpD,0DACJ;IADI,qFACJ;;;IAWA,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;;IACZ,4EACI;IAAA,mMACJ;IAAA,4DAAY;;;IACZ,4EACI;IAAA,iGAAO;IAAA,yEAAQ;IAAA,8HAAY;IAAA,4DAAS;IACxC,4DAAY;;;IAQZ,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;;IACZ,4EACI;IAAA,0JACJ;IAAA,4DAAY;;;IASZ,4EACI;IAAA,0JACJ;IAAA,4DAAY;;;IAUR,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;;IACZ,4EACI;IAAA,0JACJ;IAAA,4DAAY;;;IAShB,4EACI;IAAA,iGAAO;IAAA,yEAAS;IAAA,oHAAW;IAAA,4DAAS;IACxC,4DAAY;;ADhFjC,MAAM,qBAAqB;IAwChC,YAAoB,gBAAkC;IACpD,kDAAkD;IAClD,EAAe,EAAU,kBAAsC,EACvD,YAA0B;QAHhB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAE3B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACvD,iBAAY,GAAZ,YAAY,CAAc;QAhCpC,YAAO,GAAG,KAAK,CAAC;QAEhB,gBAAW,GAAG,EAAiB,CAAC;QAEhC,2BAAsB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC3C,yDAAU,CAAC,QAAQ;YACnB,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,yDAAU,CAAC,OAAO,CAAC,6EAAgB,CAAC;SACrC,CAAC,CAAC;QAEH,4BAAuB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC5C,yDAAU,CAAC,QAAQ;YACnB,yDAAU,CAAC,OAAO,CAAC,0EAAa,CAAC;SAClC,CAAC;QAEF,4BAAuB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC5C,yDAAU,CAAC,OAAO,CAAC,0EAAa,CAAC;SAClC,CAAC;QAEF,yBAAoB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YACzC,yDAAU,CAAC,QAAQ;YACnB,yDAAU,CAAC,OAAO,CAAC,uEAAU,CAAC;SAC/B,CAAC;QAEF,0BAAqB,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE;YAC1C,yDAAU,CAAC,QAAQ;SACpB,CAAC;QAQA,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,KAAK,CAAC;YAC3B,aAAa,EAAE,IAAI,CAAC,sBAAsB;YAC1C,cAAc,EAAE,IAAI,CAAC,uBAAuB;YAC5C,cAAc,EAAE,IAAI,CAAC,uBAAuB;YAC5C,WAAW,EAAE,IAAI,CAAC,oBAAoB;YACtC,YAAY,EAAE,IAAI,CAAC,qBAAqB;SACzC,CAAC;QAEF,+CAA+C;IACjD,CAAC;IAEK,QAAQ;;YACZ,gCAAgC;YAChC,IAAI,CAAC,MAAM,IAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAe,EAAC;YACtE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACxC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACxC,CAAC;KAAA;IAED;;;;;;;OAOG;IACG,SAAS;;YACb,IAAI,OAAqB,CAAC;YAE1B,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;YAEhC,gFAAgF;YAChF,sCAAsC;YACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,EAAE,UAAU,EACzE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YACvC,oCAAoC;YACpC,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,gCAAgC,IAAI,CAAC,WAAW,CAAC,KAAK,oFAAoF,EAAE,OAAO,CAAC,CAAC;gBAC1L,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO;aACR;YACD,sBAAsB;YACtB,IAAI,OAAO,CAAC,IAAI,KAAK,CAAC,IAAI,OAAO,CAAC,IAAI,IAAI,SAAS,EAAE;gBACnD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;gBACpE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO;aACR;YAED,mBAAmB;YACnB,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,iBAAiB,EAAE,UAAU,EACxE,EAAE,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,IAAI,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE;gBAEtB,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,+BAA+B,IAAI,CAAC,WAAW,CAAC,KAAK,eAAe,IAAI,CAAC,WAAW,CAAC,KAAK,oCAAoC;oBACjK,6FAA6F,EAAE,IAAI,CAAC,CAAC;gBAEvG,4CAA4C;gBAC5C,MAAM,WAAW,GAAG;oBAClB,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;oBAC3B,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;oBAChC,OAAO,EAAE,iDAAiD;oBAC1D,YAAY,EAAE,+EAA+E;wBAC3F,mCAAmC,iEAAS,gCAAgC,IAAI,CAAC,WAAW,CAAC,KAAK,oCAAoC;iBACzI;gBACD,gFAAgF;gBAChF,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC;gBAE5E,OAAM;aACP;QAEH,CAAC;KAAA;;0FAvHU,qBAAqB;qGAArB,qBAAqB;QC3BlC,yEACI;QAAA,8EACI;QAAA,qFACI;QAAA,iFACI;QAAA,oEACJ;QAAA,4DAAiB;QACjB,oFAAmB;QAAA,uHAAU;QAAA,4DAAoB;QACrD,4DAAkB;QAClB,mFACI;QAAA,mFACI;QAAA,gFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,kHAAS;QAAA,4DAAY;QAChC,iFACI;QADQ,4MAAiC;QACzC,iIACI;QAER,4DAAa;QACjB,4DAAiB;QACrB,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,oFAAI;QAAA,4DAAY;QAC3B,iFACI;QADQ,2MAAgC;QACxC,iIACI;QAER,4DAAa;QACjB,4DAAiB;QACrB,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,0FAAK;QAAA,4DAAY;QAC5B,iFACI;QADQ,0MAA+B;QACvC,iIACI;QAER,4DAAa;QACjB,4DAAiB;QACrB,4DAAgB;QAEhB,2EACI;QAAA,iFACI;QAAA,qFACK;QAAA,6EAAW;QAAA,2HAAa;QAAA,4DAAY;QACrC,4EAEA;QAF4B,oMAA8B;QAA1D,4DAEA;QAAA,gIACI;QAEJ,gIACI;QAEJ,gIACI;QAER,4DAAiB;QACrB,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,uJAAgB;QAAA,4DAAY;QACvC,6EACA;QAD6B,qMAA+B;QAA5D,4DACA;QAAA,gIACI;QAEJ,gIACI;QAER,4DAAiB;QACrB,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,2IAAc;QAAA,4DAAY;QACrC,6EAEA;QAF2B,qMAA+B;QAA1D,4DAEA;QAAA,gIACI;QAER,4DAAiB;QACrB,4DAAgB;QAEhB,qFACI;QAAA,2EACI;QAAA,qFACI;QAAA,6EAAW;QAAA,uJAAgB;QAAA,4DAAY;QACvC,6EAEA;QAFgB,qMAA+B;QAA/C,4DAEA;QAAA,gIACI;QAEJ,gIACI;QAER,4DAAiB;QACrB,4DAAM;QACV,4DAAgB;QAEhB,iFACI;QAAA,qFACI;QAAA,6EAAW;QAAA,gGAAM;QAAA,4DAAY;QAC7B,6EACA;QADgC,mMAA6B;QAA7D,4DACA;QAAA,gIACI;QAER,4DAAiB;QACrB,4DAAgB;QAEhB,qFACI;QAAA,2EACI;QAAA,8EACuE;QAAtB,8IAAS,eAAW,IAAC;QAAC,qFACvE;QAAA,4DAAS;QACb,4DAAM;QACV,4DAAgB;QACpB,4DAAO;QAEX,4DAAgB;QACpB,4DAAmB;QAEvB,4DAAW;QACf,4DAAM;;QA/G8B,2DAAiC;QAAjC,4FAAiC;QAC7B,0DAAiC;QAAjC,kFAAiC;QAUrC,0DAAgC;QAAhC,2FAAgC;QAC5B,0DAA8B;QAA9B,gFAA8B;QAUlC,0DAA+B;QAA/B,0FAA+B;QAC3B,0DAA4B;QAA5B,+EAA4B;QAO9C,0DAA0B;QAA1B,uFAA0B;QAIQ,0DAA8B;QAA9B,yFAA8B;QAE/C,0DAA+C;QAA/C,+JAA+C;QAG/C,0DAAgD;QAAhD,gKAAgD;QAGhD,0DAA8C;QAA9C,8JAA8C;QAS5B,0DAA+B;QAA/B,0FAA+B;QACjD,0DAAgD;QAAhD,iKAAgD;QAGhD,0DAA+C;QAA/C,gKAA+C;QAS/B,0DAA+B;QAA/B,0FAA+B;QAE/C,0DAA+C;QAA/C,gKAA+C;QAMnD,0DAAa;QAAb,sEAAa;QAIA,0DAA+B;QAA/B,0FAA+B;QAEpC,0DAA6C;QAA7C,2JAA6C;QAG7C,0DAA4C;QAA5C,0JAA4C;QAU3B,0DAA6B;QAA7B,wFAA6B;QAClD,0DAA8C;QAA9C,6JAA8C;QAMlD,0DAAa;QAAb,sEAAa;QAEoB,0DAAyB;QAAzB,iFAAyB;QAC7D,6GAA4C;;6FDvF/D,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;;;;;;;;;;;;AE1B0C;;;AAGpC,MAAM,cAAc,GAAG,8CAA8C,CAAC;AAGtE,MAAM,gBAAgB;IAI3B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAE3C,YAAY;;YAEhB,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC;iBAClD,IAAI,CAAC,IAAI,CAAC,EAAE;gBACX,IAAI,CAAC,MAAM,GAAG,IAAiB,CAAC;gBAChC,yCAAyC;gBACzC,OAAO,IAAI,CAAC,MAAM,CAAC;YACrB,CAAC,CAAC;gBACF,yDAAyD;iBACxD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;KAAA;;gFAhBU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBADH,MAAM;6FACnB,gBAAgB;cAD5B,wDAAU;eAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;AA8C3B,MAAM,gBAAgB,GAAG,oCAAoC,CAAC;AAC9D,MAAM,aAAa,GAAG,mDAAmD,CAAC;AAC1E,MAAM,UAAU,GAAG,UAAU,CAAC;AAC9B,MAAM,aAAa,GAAG,oCAAoC,CAAC;;;;;;;;;;;;;;;;;;;ACtDvB;;;AAMpC,MAAM,WAAW;IAEtB,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/C;;;OAGG;IACG,OAAO,CAAC,GAAW;;YACvB,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE;iBAC9C,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC1C,CAAC;KAAA;IAED;;;;;OAKG;IACG,OAAO,CAAC,GAAW,EAAE,IAAY;;YAErC,MAAM,OAAO,GAAG;gBACd,OAAO,EAAE;oBACP,6BAA6B,EAAE,GAAG;oBAClC,8BAA8B,EAAE,6BAA6B;iBAC9D;aACF,CAAC;YACF,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;YAEpC,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE;iBAC9D,IAAI,CAAC,IAAI,CAAC,EAAE;gBACX,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBACjC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE;YAChC,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;QACrD,CAAC;KAAA;;sEApCU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAA2C;;;AAMpC,MAAM,kBAAkB;IAE7B,YAAoB,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;IAAI,CAAC;IAE9C,YAAY,CAAC,OAAe,EAAE,OAAe;QAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,UAAU,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACnE,CAAC;;oFANU,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB,mBAFjB,MAAM;6FAEP,kBAAkB;cAH9B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;;;;;;;;;ACL0C;;;;AAIpC,MAAM,SAAS,GAAG,gDAAgD,CAAC;AAWnE,MAAM,YAAY;IAIvB,YAAoB,gBAAkC,EAC5C,WAAwB;QADd,qBAAgB,GAAhB,gBAAgB,CAAkB;QAC5C,gBAAW,GAAX,WAAW,CAAa;QAEhC,mCAAmC;QACnC,IAAI,CAAC,WAAW;YAChB;gBACE,QAAQ,EAAE,wDAAwD;gBAClE,KAAK,EAAE,EAAE;aACV;QACD,IAAI;QACJ,wCAAwC;QACxC,oCAAoC;QACpC,IAAI;IACN,CAAC;IAED;;;;;;;;;OASG;IACG,UAAU,CAAC,eAAuB,EAAE,YAAoB,EAAE,IAAS;;YAEvE,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAC,eAAe,EAAC,YAAY,EAAC,IAAI,CAAC,CAAC;YAElE,IAAI,OAAqB,CAAC;YAC1B,gDAAgD;YAChD,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YAEnD,qEAAqE;YACrE,MAAM,QAAQ,GAAG,GAAG,SAAS,IAAI,eAAe,EAAE;YAElD,sEAAsE;YACtE,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC;YAE7B,8CAA8C;YAC9C,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;iBAClD,IAAI,CAAC,IAAI,CAAC,EAAE;gBACX,sDAAsD;gBACtD,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE;gBACxD,OAAO,OAAO;YAChB,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,CAAC,EAAE;gBACX,wDAAwD;gBACxD,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE;gBACrD,OAAO,OAAO;YAChB,CAAC,CAAC;QACN,CAAC;KAAA;;wEAvDU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACdD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'registration', component: RegistrationComponent },\n  { path: '**', component: LoginComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AppConfigService, AppConfig } from './services/app-config.service';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <app-header></app-header>\n    <router-outlet></router-outlet>\n  `\n})\nexport class AppComponent implements OnInit {\n  appConfig: AppConfig | void;\n  \n  constructor(private appConfigService: AppConfigService,) { }\n\n  async ngOnInit() {\n    // читать конфиг\n    this.appConfig = await this.appConfigService.getAppConfig()\n    if (!this.appConfig) {\n      alert('Помилка в конфігураційному файлі')\n    }\n    console.log(\"APP\", this.appConfig);\n\n    // TODO: инициализировать БД\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n// app components\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegistrationComponent } from './registration/registration.component';\n\n// material components\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    LoginComponent,\n    RegistrationComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSelectModule,\n    MatInputModule,\n    MatGridListModule,\n    MatSnackBarModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar class=\"tl-toolbar\">\n    <button mat-icon-button>\n        <mat-icon class=\"header-menu-button\">menu</mat-icon>\n    </button>\n    <span class=\"tl-title\">Завантаження студентських робіт</span>\n    <!-- для добавления инфы справа -->\n    <ng-content></ng-content>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\n// import { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { AppConfigService, AppConfig, ID_PATTERN } from '../services/app-config.service';\nimport { ProxyService, ProxyRetCode, PROXY_URL } from '../services/proxy.service';\nimport { InfoMessageService } from '../services/info-message.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: 'login.component.html',\n  styleUrls: ['login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  config: AppConfig;\n  studentId: string;\n  studentPsw: string;\n\n  studentIdFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(ID_PATTERN)\n  ])\n\n  studentPswFormControl = new FormControl('', [\n    Validators.required\n  ])\n\n\n  constructor(fb: FormBuilder, private appConfigService: AppConfigService,\n    private proxyService: ProxyService, private infoMessageService: InfoMessageService) {\n\n    this.loginForm = fb.group({\n      \"studentId\": this.studentIdFormControl,\n      \"studentPsw\": this.studentPswFormControl,\n    })\n\n    this.studentId = '';\n  }\n\n  async ngOnInit() {\n    this.config = await this.appConfigService.getAppConfig() as AppConfig;\n  }\n\n  /**\n   * открывает главный экран с работами студента\n   */\n  clickNext() {\n\n    const studentInfo = this.getStudentInfo(this.studentId);\n    if (!studentInfo) return;\n\n    //todo открить єкран студента и передать ему данные студента\n  }\n\n  /**\n   * отсылает студенту пароль на его адрес, который берет из БД по логину\n   */\n  async lostPassword(): Promise<void> {\n\n    // попросіть заполніть поле login, еслі пустое\n    if (this.studentIdFormControl.invalid) {\n      this.infoMessageService.snackMessage('Заповніть будь-ласка поле \"Номер перепустки\" а потім тисніть сюди', 'alert')\n      return;\n    }\n\n    // прочітать studentInfo\n    const studentInfo = await this.getStudentInfo(this.studentId, false);\n    if (!studentInfo) return;\n\n    // вибрать email і пароль\n    const email = studentInfo['email'];\n    const psw = studentInfo['psw'];\n    const name = studentInfo['name'];\n\n    // отослать пароль на email\n    const mailContent = {\n      name: name,\n      email_to: email,\n      subject: 'СИСТЕМА ЗАВАНТАЖЕННЯ - запрос на пароль',\n      html_content: `Ваш пароль для входу - <strong>${psw}</strong>`\n    }\n    this.proxyService.sendToPoxy('mailSender', 'email', { \"data\": mailContent })\n\n    // вывести сообщеніе\n    this.infoMessageService.snackMessage(`На вашу електронну адресу надіслано ваш пароль`, 'oK');\n\n  }\n\n  /**\n   * считывает из БД данные студента\n   * @param studentLogin - логин студента\n   * @return - объект из БД с данными студента | {}\n   */\n  async getStudentInfo(studentLogin: string, checkPassword = true): Promise<object | boolean> {\n\n    const retCode = await this.proxyService.sendToPoxy('get_student_info', 'database',\n      { \"login\": studentLogin }) as ProxyRetCode;\n\n    if (retCode.data.length === 0) {\n      this.infoMessageService.snackMessage(`Студент з логіном ${studentLogin} не зареєстрований. Перевірте номер Вашої перепустки`, \"alert\");\n      return false;\n    }\n\n    if (checkPassword) {\n      if (retCode.data[0].psw !== this.studentPsw) {\n        this.infoMessageService.snackMessage('Ви ввели невірний пароль', \"alert\");\n        return false;\n      }\n    }\n    // вернуть данные если все успешо\n    return retCode.data[0];\n  }\n}\n","<div class=\"content\">\n    <mat-card class=\"login-window forms-layout\">\n        <mat-card-header class=\"forms-header\">\n            <mat-card-title>\n                <img src=\"../../assets/img/logo.png\" class=\"logo-img\">\n            </mat-card-title>\n            <mat-card-subtitle>Вхід</mat-card-subtitle>\n        </mat-card-header>\n\n        <mat-card-content>\n            <form [formGroup]=\"loginForm\">\n                <mat-grid-list cols=\"2\" rowHeight=\"80px\" gutterSize=\"30px\">\n                    <mat-grid-tile>\n                        <mat-form-field appearance = \"outline\">\n                            <mat-label>Номер перепустки</mat-label>\n                            <input matInput [(ngModel)]=\"studentId\" formControlName=\"studentId\"\n                                placeholder=\"тількі цифри\">\n                            <mat-error *ngIf=\"studentIdFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentIdFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance = \"outline\">\n                            <mat-label>Пароль</mat-label>\n                            <input matInput type=\"password\" [(ngModel)]=\"studentPsw\" formControlName=\"studentPsw\">\n                            <mat-error *ngIf=\"studentPswFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n                </mat-grid-list>\n            </form>\n        </mat-card-content>\n\n        <mat-card-actions>\n            <mat-grid-list cols=\"2\" rowHeight=\"10px\" gutterSize=\"30px\">\n                <mat-grid-tile></mat-grid-tile>\n                <mat-grid-tile>\n                    <!-- <div class=\"right-align-forced\"> -->\n                    <div style=\"font-size: x-small;\">\n                        <a href=\"#\" (click)=\"lostPassword()\">Забув пароль</a>\n                    </div>\n                </mat-grid-tile>\n            </mat-grid-list>\n        </mat-card-actions>\n\n        <mat-card-footer style=\"margin-top: 30px;\">\n            <mat-grid-list cols=\"2\" rowHeight=\"50px\" gutterSize=\"30px\">\n\n                <mat-grid-tile>\n                    <button mat-button [routerLink]=\"['/registration']\" routerLinkActive=\"router-link-active\">\n                        <div>Зареєструватись</div>\n                    </button>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <!-- <div class=\"right-align-forced\"> -->\n                    <button mat-flat-button color=\"primary\" [disabled]=\"loginForm.invalid\" (click)=\"clickNext()\">Далі\n                    </button>\n                    <!-- </div> -->\n                </mat-grid-tile>\n\n            </mat-grid-list>\n        </mat-card-footer>\n\n    </mat-card>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\n\nimport {\n  AppConfigService, AppConfig, Faculty,\n  NAME_UKR_PATTERN, EMAIL_PATTERN, ID_PATTERN, PHONE_PATTERN\n} from '../services/app-config.service';\nimport { ProxyService, ProxyRetCode, PROXY_URL } from '../services/proxy.service';\nimport {InfoMessageService}from '../services/info-message.service';\n\ninterface StudentData {\n  faculty: string,\n  course: number,\n  group: string,\n  email: string,\n  phone?: string,\n  login: number,\n  name: string,\n  psw: string,\n  active: boolean\n}\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: 'registration.component.html',\n  styleUrls: ['registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  config: AppConfig;\n  faculties: Faculty[];\n  courses: number[];\n  groups: string[];\n\n  proxyConfig: object;\n\n  loading = false;\n\n  studentData = {} as StudentData;\n\n  studentNameFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(2),\n    Validators.pattern(NAME_UKR_PATTERN)\n  ]);\n\n  studentEmailFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(EMAIL_PATTERN)\n  ])\n\n  studentPhoneFormControl = new FormControl('', [\n    Validators.pattern(PHONE_PATTERN)\n  ])\n\n  studentIdFormControl = new FormControl('', [\n    Validators.required,\n    Validators.pattern(ID_PATTERN)\n  ])\n\n  studentPswFormControl = new FormControl('', [\n    Validators.required\n  ])\n\n\n  constructor(private appConfigService: AppConfigService,\n    // fb: FormBuilder, private snackBar: MatSnackBar,\n    fb: FormBuilder, private infoMessageService: InfoMessageService,\n    private proxyService: ProxyService) {\n\n    this.registerForm = fb.group({\n      \"studentName\": this.studentNameFormControl,\n      \"studentEmail\": this.studentEmailFormControl,\n      \"studentPhone\": this.studentPhoneFormControl,\n      \"studentId\": this.studentIdFormControl,\n      \"studentPsw\": this.studentPswFormControl,\n    })\n\n    // this.proxyConfig = proxyService.proxyConfig;\n  }\n\n  async ngOnInit() {\n    // получіть данние із app_config\n    this.config = await this.appConfigService.getAppConfig() as AppConfig;\n    this.faculties = this.config.data.faculties;\n    this.courses = this.config.data.courses;\n    this.groups = this.config.data.groups;\n  }\n\n  /**\n   * регистрирует студета путем передачи его данных через прокси-функцию на\n   * сервер БД\n  * Сначала проверяет, есть ли такой логин в БД - посылает запрос с логином,\n  * при отсутствии логина посылает 2-й запрос с рег. данными\n  * при успешной регистрации отправляет через прокси запрос к sendGrid для отсылки\n  * студенту письма для подтверждения\n   */\n  async clickNext(): Promise<any> {\n    let retCode: ProxyRetCode;\n\n    this.studentData.active = false;\n\n    // проверить зарегистрировался ли уже студетн ранее: делаем запрос к БД найти Id\n    // в retCode.data - результат проверки\n    this.loading = true;\n    retCode = await this.proxyService.sendToPoxy('get_student_info', 'database',\n      { \"login\": this.studentData.login });\n    // виходим, если студент уже регался\n    if (retCode.data.length > 0) {\n      this.infoMessageService.snackMessage(`Студент з номером перепустки ${this.studentData.login} вже зареєстрований.\\nПеревірте номер Вашої перепустки, або звернітся до викладача`, \"alert\");\n      this.loading = false;\n      return;\n    }\n    // выходим если ошибки\n    if (retCode.code === 0 || retCode.code == undefined) {\n      this.infoMessageService.snackMessage(`Щось пішло не так!`, 'alert');\n      this.loading = false;\n      return;\n    }\n\n    // регистрируем ...\n    retCode = await this.proxyService.sendToPoxy('add_new_student', 'database',\n      { \"data\": this.studentData });\n    this.loading = false;\n\n    if (retCode.code === 1) {\n\n      this.infoMessageService.snackMessage(`Вас зареєстровано з логіном ${this.studentData.login}. На адресу ${this.studentData.email} надіслано запит на підтвердження.` +\n        `УВАГА: відсилка повідомлення може зайняти декілька хвилин, також воно може потрапити в спам`, 'oK');\n\n      // отправим мыло с запросом на подтверждение\n      const mailContent = {\n        name: this.studentData.name,\n        email_to: this.studentData.email,\n        subject: 'СИСТЕМА ЗАВАНТАЖЕННЯ - підтвердження реєстрації',\n        html_content: 'якщо ви щойно реєструвалися в системі завантаження то натисніть це посилання ' +\n          `для підтвердження <br><a href ='${PROXY_URL}/set_student_to_active?login=${this.studentData.login}'><strong>Підтвердити</strong></a>`\n      }\n      // регистрация прошла успешо: послать синхронно письмо для подтверждения на мыло\n      this.proxyService.sendToPoxy('mailSender', 'email', { \"data\": mailContent })\n\n      return\n    }\n\n  }\n}\n","<div class=\"content\">\n    <mat-card class=\"register-window forms-layout\">\n        <mat-card-header class=\"forms-header\">\n            <mat-card-title>\n                <img src=\"../../assets/img/logo.png\" class=\"logo-img\">\n            </mat-card-title>\n            <mat-card-subtitle>Реєстрація</mat-card-subtitle>\n        </mat-card-header>\n        <mat-card-content>\n            <mat-grid-list cols=\"3\" rowHeight=\"80px\" gutterSize=\"30px\">\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Факультет</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.faculty\">\n                            <mat-option *ngFor=\"let faculty of faculties\" [value]=\"faculty['short_name']\">\n                                {{faculty['short_name']}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Курс</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.course\">\n                            <mat-option *ngFor=\"let course of courses\" [value]=\"course\">\n                                {{course}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <mat-grid-tile>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-label>Група</mat-label>\n                        <mat-select [(ngModel)]=\"studentData.group\">\n                            <mat-option *ngFor=\"let group of groups\" [value]=\"group\">\n                                {{group}}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </mat-grid-tile>\n\n                <form [formGroup]=\"registerForm\">\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                             <mat-label>Прізвище І.П.</mat-label>\n                            <input matInput type=\"text\" [(ngModel)]=\"studentData.name\"\n                                placeholder=\"Заповнюйте украЇнською\" formControlName=\"studentName\">\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.minlength\">\n                                Занадто коротке прізвище\n                            </mat-error>\n                            <mat-error *ngIf=\"studentNameFormControl.errors?.pattern\">\n                                Пишіть <strong>Українською!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Електронна пошта</mat-label>\n                            <input matInput type=\"email\" [(ngModel)]=\"studentData.email\" formControlName=\"studentEmail\">\n                            <mat-error *ngIf=\"studentEmailFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                            <mat-error *ngIf=\"studentEmailFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Номер телефону</mat-label>\n                            <input matInput type=\"tel\" [(ngModel)]=\"studentData.phone\" formControlName=\"studentPhone\"\n                                placeholder=\"Це поле необов'язкове\">\n                            <mat-error *ngIf=\"studentPhoneFormControl.errors?.pattern\">\n                                Помилка в форматі!\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile [colspan]=\"2\">\n                        <div class=\"right-align-forced\">\n                            <mat-form-field appearance=\"outline\">\n                                <mat-label>Номер перепустки</mat-label>\n                                <input matInput [(ngModel)]=\"studentData.login\" formControlName=\"studentId\"\n                                    placeholder=\"тількі цифри\">\n                                <mat-error *ngIf=\"studentIdFormControl.errors?.required\">\n                                    Це поле<strong> обов'зкове!</strong>\n                                </mat-error>\n                                <mat-error *ngIf=\"studentIdFormControl.errors?.pattern\">\n                                    Помилка в форматі!\n                                </mat-error>\n                            </mat-form-field>\n                        </div>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile>\n                        <mat-form-field appearance=\"outline\">\n                            <mat-label>Пароль</mat-label>\n                            <input matInput type=\"password\" [(ngModel)]=\"studentData.psw\" formControlName=\"studentPsw\">\n                            <mat-error *ngIf=\"studentPswFormControl.errors?.required\">\n                                Це поле<strong> обов'зкове!</strong>\n                            </mat-error>\n                        </mat-form-field>\n                    </mat-grid-tile>\n\n                    <mat-grid-tile [colspan]=\"3\">\n                        <div class=\"right-align-forced\">\n                            <button mat-flat-button color=\"primary\" [class.spinner]=\"loading\"\n                                [disabled]=\"registerForm.invalid || loading\" (click)=\"clickNext()\">Далі\n                            </button>\n                        </div>\n                    </mat-grid-tile>\n                </form>\n\n            </mat-grid-list>\n        </mat-card-content>\n\n    </mat-card>\n</div>","import { Injectable } from '@angular/core';\nimport { DataService } from './data.service';\n\nexport const APP_CONFIG_URL = \"http://localhost:4200/assets/app-config.json\";\n\n@Injectable({ providedIn: 'root' })\nexport class AppConfigService {\n\n  config: AppConfig;\n\n  constructor(private dataService: DataService) { }\n\n  async getAppConfig() {\n\n    return await this.dataService.getData(APP_CONFIG_URL)\n      .then(data => {\n        this.config = data as AppConfig;\n        // console.log(\"APPCONFIG\", this.config);\n        return this.config;\n      })\n      // TODO: сделать нормальную обработку ошибок (читать как)\n      .catch(err => console.log(err))\n  }\n}\n\n/**\n * TODO: комментировать!\n */\nexport interface AppConfig {\n  data: {\n    faculties: Faculty[],\n    courses: number[],\n    groups: string[],\n    disciplines: Discipline[],\n    tasks: Task[]\n  }\n}\n\nexport interface Faculty {\n  shortName: string,\n  longName: string\n}\nexport interface Discipline {\n  shortName: string,\n  longName: string\n}\nexport interface Task {\n  name: string,\n  description?: string\n}\n\nexport const NAME_UKR_PATTERN = \"^[А-ЕЖ-ЩЬ-ЯІЄа-еж-щь-яіїє. \\'\\\"]+$\";\nexport const EMAIL_PATTERN = \"^([a-z0-9_\\.-]+)@([a-z0-9_\\.-]+)\\.([a-z\\.]{2,6})$\";\nexport const ID_PATTERN = \"^\\\\d{6}$\";\nexport const PHONE_PATTERN = \"^[0-9]{3}[- ][0-9]{3}[- ][0-9]{4}$\";\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * получает строку REST данных из заданного url \n   * @param url - откуда брать данные\n   */\n  async getData(url: string) {\n    return await this.httpClient.get(url).toPromise()\n      .catch(err => console.log(\"***\", err))\n  }\n\n  /**\n   * передает на `url` json-данные\n   * @param url  -  адрес\n   * @param data - данные\n   * @return - {data: <json | error>, code: <1-успех | 0-ошібка>}\n   */\n  async putData(url: string, data: object): Promise<object | void> {\n\n    const options = {\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,POST,OPTIONS,DELETE,PUT'\n      }\n    };\n    console.log(\"DATASERVICE-URL\", url);\n\n    return await this.httpClient.post(url, data, options).toPromise()\n      .then(resp => {\n        console.log(\"DATASERVICE- RESP\");\n        console.log(resp);\n        return { data: resp, code: 0 }\n      })\n      .catch(err => { return { data: err, code: 1 } });\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InfoMessageService {\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  snackMessage(message: string, msgType: string) {\n    this.snackBar.open(message, '\\u00D7', { panelClass: [msgType] });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AppConfigService } from './app-config.service';\nimport { DataService } from './data.service';\n\nexport const PROXY_URL = 'https://us-central1-tl-2020.cloudfunctions.net';\n\nexport interface ProxyRetCode {\n  code: number,\n  message: string,\n  data?: any\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProxyService {\n  // TODO сделать через інтерфейс\n  proxyConfig: any;\n\n  constructor(private appConfigService: AppConfigService,\n    private dataService: DataService) {\n\n    // TODO взять из appConfig (потом) \n    this.proxyConfig =\n    {\n      database: 'https://webhooks.mongodb-realm.com/api/client/v2.0/app',\n      email: '',\n    }\n    // {\n    //   database: 'http://localhost:8080/',\n    //   email: 'http://sendgrid:5000/',\n    // }\n  }\n\n  /**\n   * отправляет запросы на прокси\n   * @param proxyEntryPoint - имя функции на прокси, которая перешлет\n   * данные на оконечный сервис\n   * @param endPointName - имя сервиса из `proxyConfig`, для которого прокси\n   * пересылает данные\n   * @param data - данные для обработки\n   * @return - ответ от прокси с обработаным запросом\n   *  {code: <1-успех | 0-ошибка>, message: <Ok | err.message> data: <json | {}>}\n   */\n  async sendToPoxy(proxyEntryPoint: string, endPointName: string, data: any): Promise<any> {\n\n    console.log(\" PROXY-ПАРАМЕТРЫ\",proxyEntryPoint,endPointName,data);\n    \n    let retCode: ProxyRetCode;\n    // взять url оконечного сервиса из `proxyConfig`\n    const endPointUrl = this.proxyConfig[endPointName];\n    \n    // формирование  адреса точки в прокси отвечающей за пересылку данных\n    const proxyUrl = `${PROXY_URL}/${proxyEntryPoint}`\n\n    // добавить к `data` точку назначение для обработки оконечным сервисом\n    data.end_point = endPointUrl;\n\n    // отправить PUT на прокси через `dataService`\n    return await this.dataService.putData(proxyUrl, data)\n      .then(data => {\n        // todo проверить возврат от dataService  data['code']\n        retCode = { code: 1, message: \"Ok\", data: data['data'] }\n        return retCode\n      })\n      .catch(err => {\n        // в `data` помещается код возврата из end-point сервиса\n        retCode = { code: 0, message: err.message, data: {} }\n        return retCode\n      })\n  }\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}